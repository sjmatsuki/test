"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class gps_t(object):
    __slots__ = ["timestamp", "latitude", "latitude_s", "longitude", "longitude_s", "altitude", "altitude_s", "easting", "northing", "zone", "zoneLetter"]

    def __init__(self):
        self.timestamp = 0
        self.latitude = 0.0
        self.latitude_s = ""
        self.longitude = 0.0
        self.longitude_s = ""
        self.altitude = 0.0
        self.altitude_s = ""
        self.easting = 0.0
        self.northing = 0.0
        self.zone = 0
        self.zoneLetter = ""

    def encode(self):
        buf = BytesIO()
        buf.write(gps_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qd", self.timestamp, self.latitude))
        __latitude_s_encoded = self.latitude_s.encode('utf-8')
        buf.write(struct.pack('>I', len(__latitude_s_encoded)+1))
        buf.write(__latitude_s_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.longitude))
        __longitude_s_encoded = self.longitude_s.encode('utf-8')
        buf.write(struct.pack('>I', len(__longitude_s_encoded)+1))
        buf.write(__longitude_s_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.altitude))
        __altitude_s_encoded = self.altitude_s.encode('utf-8')
        buf.write(struct.pack('>I', len(__altitude_s_encoded)+1))
        buf.write(__altitude_s_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ddh", self.easting, self.northing, self.zone))
        __zoneLetter_encoded = self.zoneLetter.encode('utf-8')
        buf.write(struct.pack('>I', len(__zoneLetter_encoded)+1))
        buf.write(__zoneLetter_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps_t()
        self.timestamp, self.latitude = struct.unpack(">qd", buf.read(16))
        __latitude_s_len = struct.unpack('>I', buf.read(4))[0]
        self.latitude_s = buf.read(__latitude_s_len)[:-1].decode('utf-8', 'replace')
        self.longitude = struct.unpack(">d", buf.read(8))[0]
        __longitude_s_len = struct.unpack('>I', buf.read(4))[0]
        self.longitude_s = buf.read(__longitude_s_len)[:-1].decode('utf-8', 'replace')
        self.altitude = struct.unpack(">d", buf.read(8))[0]
        __altitude_s_len = struct.unpack('>I', buf.read(4))[0]
        self.altitude_s = buf.read(__altitude_s_len)[:-1].decode('utf-8', 'replace')
        self.easting, self.northing, self.zone = struct.unpack(">ddh", buf.read(18))
        __zoneLetter_len = struct.unpack('>I', buf.read(4))[0]
        self.zoneLetter = buf.read(__zoneLetter_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gps_t in parents: return 0
        tmphash = (0xca8fd0c44347053f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps_t._packed_fingerprint is None:
            gps_t._packed_fingerprint = struct.pack(">Q", gps_t._get_hash_recursive([]))
        return gps_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

