"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import gps.str

class gps_t(object):
    __slots__ = ["timestamp", "latitude_d", "latitude_s", "longitude_d", "longitude_s", "altitude_d", "altitude_s", "utm_lat", "utm_long", "zone", "zoneLetter"]

    def __init__(self):
        self.timestamp = 0
        self.latitude_d = 0.0
        self.latitude_s = gps.str()
        self.longitude_d = 0.0
        self.longitude_s = gps.str()
        self.altitude_d = 0.0
        self.altitude_s = gps.str()
        self.utm_lat = 0.0
        self.utm_long = 0.0
        self.zone = 0
        self.zoneLetter = gps.str()

    def encode(self):
        buf = BytesIO()
        buf.write(gps_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qd", self.timestamp, self.latitude_d))
        assert self.latitude_s._get_packed_fingerprint() == gps.str._get_packed_fingerprint()
        self.latitude_s._encode_one(buf)
        buf.write(struct.pack(">d", self.longitude_d))
        assert self.longitude_s._get_packed_fingerprint() == gps.str._get_packed_fingerprint()
        self.longitude_s._encode_one(buf)
        buf.write(struct.pack(">d", self.altitude_d))
        assert self.altitude_s._get_packed_fingerprint() == gps.str._get_packed_fingerprint()
        self.altitude_s._encode_one(buf)
        buf.write(struct.pack(">ddq", self.utm_lat, self.utm_long, self.zone))
        assert self.zoneLetter._get_packed_fingerprint() == gps.str._get_packed_fingerprint()
        self.zoneLetter._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != gps_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return gps_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = gps_t()
        self.timestamp, self.latitude_d = struct.unpack(">qd", buf.read(16))
        self.latitude_s = gps.str._decode_one(buf)
        self.longitude_d = struct.unpack(">d", buf.read(8))[0]
        self.longitude_s = gps.str._decode_one(buf)
        self.altitude_d = struct.unpack(">d", buf.read(8))[0]
        self.altitude_s = gps.str._decode_one(buf)
        self.utm_lat, self.utm_long, self.zone = struct.unpack(">ddq", buf.read(24))
        self.zoneLetter = gps.str._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if gps_t in parents: return 0
        newparents = parents + [gps_t]
        tmphash = (0xda41fc1199c25f7e+ gps.str._get_hash_recursive(newparents)+ gps.str._get_hash_recursive(newparents)+ gps.str._get_hash_recursive(newparents)+ gps.str._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if gps_t._packed_fingerprint is None:
            gps_t._packed_fingerprint = struct.pack(">Q", gps_t._get_hash_recursive([]))
        return gps_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

